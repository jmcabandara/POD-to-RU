=encoding utf8

=head1 NAME/НАИМЕНОВАНИЕ

perldebguts - Внутренности отладки в Perl

=head1 ОПИСАНИЕ

Это не L<perldebug>, который говорит вам, как использовать
отладчик. Это руководство описывает низкоуровневые детали относительно
внутренностей отладчика, которые варьируются от трудно до невозможно
 понимаемых для тех, кто еще не работал плотно с внутренностями Perl.
Предостережение лектора.

=head1 Внутренние компоненты отладчика (Debugger Internals)

Perl имеет специальные хуки (hooks) отладки во время компиляции и во время выполнения, используемые
для создания среды отладки. Эти хуки не следует путать
с командами I<perl -Dxxx>, описанными в L<perlrun>, которые используются
 только, если специальный Perl построен (built) по инструкции в
  pod странице F<INSTALL> в дереве исходного кода Perl.
  
Например, когда вы называете встроенную в Perl  функцию C<caller>
из пакета C<DB>, аргументы, которые соответствующий стек
фрейм был вызван копируются в C<@DB::args> массива. Этот механизм
 включается, когда Perl вызывется с ключом  B<-d>.
В частности включены следующие дополнительные функции
(см. L<perlvar/$^P>):

=over 4

=item *

Perl вставляет содержимое C<$ENV{PERL5DB}> (или C<BEGIN {require
'perl5db.pl'}> если его нет) перед первой строкой вашей программы.

=item *

Каждый массив  C<@{"_<$filename"}>  держит строки $filename для
файла, скомпилированного с Perl. То же самое верно для C<выполняемых> (C<eval>) строк, 
которые содержат подпрограммы, или которых выполняются в настоящее время.
$filename для C<выполняемых> строк выглядит как C<(eval 34)>.

Значения в этом массиве магическое в числовом контексте: они сравнивают
равенство нулю только, если строка не ломается.

=item *

Каждый хэш C<%{"_<$filename"}> содержит точки останова и действия с ключом
по ее номеру. Отдельные записи (в отличие от всего хэша)
устанавливаемы. Perl заботится только о логическом значении правда (true) здесь, хотя
значения, используемые F<perl5db.pl> имеют форму
C<"$break_condition\0$action">. 

То же самое хранится для исполняемых строк, которые содержат подпрограммы, или
которые, выполняются в настоящее время. $filename для C<выполняемых> строк 
выглядит как C<(eval 34)>.

=item *

Каждый скаляр C<${"_<$filename"}> содержит C<"_<$filename">. 
Это также в случае выполнения строк, которые содержат подпрограммы, или
которые в настоящее время выполняются. $filename для C<выполняемых> строк 
выглядит как C<(eval 34)>.

=item *

После компиляции каждого C<требуемого> файла, но перед выполнением,
вызывается процедура C<DB::postponed(*{"_<$filename"})> , если существует
C<DB::postponed>.  Здесь $filename - это развернутое имя
 C<требуемого> файла, как он найдет в значениях (values) %INC.

=item *

После компиляции каждого C<подимени>, проверяется
C<$DB::postponed{subname}> , если она существует.  Если этот ключ существует, то
вызывается C<DB::postponed(subname)>, если существует процедура C<DB::postponed>.

=item *

Поддерживается хэш C<%DB::sub>, чьи ключи являются именами подпрограмм
и значения которых имеют форму C<filename:startline-endline>.
C<filename> имеет форму C<(eval 34)> для подпрограмм, определенные внутри
C<eval>.

=item *

Когда выполнение программы достигнет точки, на которой может стоять
точка останова, подпрограмма C<DB::DB()> вызывается, если любая из переменных
C<$DB::trace>, C<$DB::single>, или C<$DB::signal>имеет значение true. Эти переменные
не являются C<локализованными>. Эта функция отключена при выполнении
внутри  C<DB::DB()>, включая функции, которые вызываются из нее
Пока выражение C<< $^D & (1<<30) >>  имеет значение true.

=item *

Когда выполнение программы достигает вызова подпрограммы,  вместо этого производится вызов 
C<&DB::sub>(I<args>) с C<$DB::sub>, которая содержит
имя вызываемой подпрограммы. (Этого не случиться, если подпрограмма
была скомпилирована из C<DB> пакета.)

=back

Обратите внимание, что если  C<&DB::sub> нужны внешние данные, чтобы он работал,
то  без нее не возможен вызов подпрограммы. В качестве примера, стандартный
отладчик C<&DB::sub> зависит от переменной C<$DB::deep>
(Он определяет, сколько уровней рекурсии в глубину отладчика вы можете использовать
До обязательного перерыва). Если C<$DB::deep> не определено, вызовы подпрограммы
 невозможны, хотя существует C<&DB::sub>.

=head2 Написание собственного отладчика (Writing Your Own Debugger)

=head3 Переменные среды (Environment Variables)

Переменная среды C<PERL5DB> может использоваться для определения отладчика.
Например, минимальный «рабочий» отладчик (он фактически ничего не делает)
состоит из одной строки:

  sub DB::DB {}

Его можно легко определить следующим образом:

  $ PERL5DB="sub DB::DB {}" perl -d your-script

Можно создать еще один короткий отладчик в одну строку, несколько более полезный:

  sub DB::DB {print ++$i; scalar <STDIN>}

Этот отладчик выводит число, которое увеличивается для каждого оператора, с которым
 он сталкивается и ждет, пока вы нажмете новую строку, прежде чем перейдете к 
 следующему оператору(statement).

Следующий отладчик действительно полезен:

  {
    package DB;
    sub DB  {}
    sub sub {print ++$i, " $sub\n"; &$sub}
  }

Он печатает порядковый номер каждого вызова подпрограммы и имя
вызываемой подпрограммы. Обратите внимание, что C<&DB::sub> компилируется в
Пакет C<DB> с помощью директивы C<package>.

Когда он запускается, отладчик считывает ваш файл rc (F<./.perldb> или
F<~/.perldb> под Unix), который может устанавливать важные параметры.
(Здесь также можно определить подпрограмму (C<&afterinit>), она выполняется
после того как отладчик завершит свою инициализацию.)

После считывания файла rc отладчик считывает переменную окружения PERLDB_OPTS
 и использует ее для установки параметров отладчика. СОДЕРЖАНИЕ
Содержимое этой переменной обрабатывается так, как если бы они были аргументом
 C<o ...> команды отладчика (q.v. в L<perldebug/"Configurable Options">) (q.v. в L<perldebug/"Настраиваемые параметры">). 

=head3 Внутренние переменные отладчика (Debugger Internal Variables)

В дополнение к упомянутым выше переменным, связанным с файлом и подпрограммой,
отладчик также поддерживает различные магические внутренние переменные.

=over 4

=item *

C<@DB::dbline> является псевдонимом для C<@{"::_<current_file"}>, который
содержит строки выбранного в данный момент файла (скомпилированного Perl), либо
явно выбранный с помощью команды отладчика C<f> или неявно по потоку
исполнения.

Значения в этом массиве являются магическими в числовом контексте: они сравнивают
равенство нулю только в том случае, если строка не является хрупкой.(they compare
equal to zero only if the line is not breakable.)

=item *

C<%DB::dbline> является псевдонимом для C<%{"::_<current_file"}>, который
содержит точки останова и действия, заданные номером строки в
выбранный в данный момент файл, либо явно выбранный с помощью
команды отладчика C<f> , или неявно по потоку выполнения.

Как отмечалось ранее, отдельные записи (в отличие от всего хеша)
могут устанавливаться. Perl только заботится о булевой истине здесь, хотя
значения, используемые F<perl5db.pl> имеют вид
C<"$break_condition\0$action">.

=back

=head3 Функции настройки отладчика

Некоторые функции предусмотрены для упрощения настройки.

=over 4

=item *

См. L<perldebug/"Configurable Options"> (L<perldebug/"Настраиваемые параметры">) для описания параметров, проанализированных
C<DB::parse_options(string)>.

=item *

C<DB::dump_trace(skip[,count])> пропускает указанное количество кадров
и возвращает список, содержащий информацию о вызывающих кадрах (все
из них, если C<count> отсутствует).  Каждая запись является ссылкой на хэш
с ключами C<context> (либо C<.>, C<$>, or C<@>), C<sub> (имя подпрограммы
 или сведения о C<eval>), C<args> (C<undef>  или ссылка на
массив), C<file>, и C<line>.

=item *

C<DB::print_trace(FH, skip[, count[, short]])> печатает
отформатированную информацию о кадрах вызывающего (caller frames). Последние две функции могут быть
удобными в качестве аргументов командам  C<< < >>, C<< << >>.

=back

Обратите внимание, что любые переменные и функции, не документированные в
эти манах (или в L<perldebug>) рассматриваются только для внутреннего
использования и, как таковые, могут быть изменены без предварительного уведомления.

=head1 Примеры вывода списка кадров (Frame Listing Output Examples)

Опцию C<frame> можно использовать для управления выходом кадра
информации. Например, сравните этот вывод трейса:

 $ perl -de 42
 Дамп стека во время смерти включен за пределами проверки. (Stack dump during die enabled outside of evals.)

 Loading DB routines from perl5db.pl patch level 0.94
 Emacs support available.

 Enter h or 'h h' for help.

 main::(-e:1):   0
   DB<1> sub foo { 14 }

   DB<2> sub bar { 3 }

   DB<3> t print foo() * bar()
 main::((eval 172):3):   print foo() + bar();
 main::foo((eval 168):2):
 main::bar((eval 170):2):
 42

с этим, как только C<o>ption C<frame=2> был установлен:

   DB<4> o f=2
                frame = '2'
   DB<5> t print foo() * bar()
 3:      foo() * bar()
 entering main::foo
  2:     sub foo { 14 };
 exited main::foo
 entering main::bar
  2:     sub bar { 3 };
 exited main::bar
 42

В качестве демонстрации ниже мы приведем трудоемкий список
в результате установки переменной окружения  C<PERLDB_OPTS> на
значение C<f=n N>, и запуск I<perl -d -V> из командной строки.
Показано, что примеры, использующие различные значения C<n> дают вам почувстовать
 разницу между настройками. Хотя это может быть длинно, это не полный список, а только выдержки.
 
=over 4

=item 1

  entering main::BEGIN
   entering Config::BEGIN
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   Package lib/Config.pm.
   entering Config::TIEHASH
   entering Exporter::import
    entering Exporter::export
  entering Config::myconfig
   entering Config::FETCH
   entering Config::FETCH
   entering Config::FETCH
   entering Config::FETCH

=item 2

  entering main::BEGIN
   entering Config::BEGIN
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   exited Config::BEGIN
   Package lib/Config.pm.
   entering Config::TIEHASH
   exited Config::TIEHASH
   entering Exporter::import
    entering Exporter::export
    exited Exporter::export
   exited Exporter::import
  exited main::BEGIN
  entering Config::myconfig
   entering Config::FETCH
   exited Config::FETCH
   entering Config::FETCH
   exited Config::FETCH
   entering Config::FETCH

=item 3

  in  $=main::BEGIN() from /dev/null:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from li
  in  @=Config::myconfig() from /dev/null:0
   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'osname') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'osvers') from lib/Config.pm:574

=item 4

  in  $=main::BEGIN() from /dev/null:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   out $=Config::BEGIN() from lib/Config.pm:0
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   out $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
  out $=main::BEGIN() from /dev/null:0
  in  @=Config::myconfig() from /dev/null:0
   in  $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'package') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'baserev') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
   out $=Config::FETCH(ref(Config), 'PERL_VERSION') from lib/Config.pm:574
   in  $=Config::FETCH(ref(Config), 'PERL_SUBVERSION') from lib/Config.pm:574

=item 5

  in  $=main::BEGIN() from /dev/null:0
   in  $=Config::BEGIN() from lib/Config.pm:2
    Package lib/Exporter.pm.
    Package lib/Carp.pm.
   out $=Config::BEGIN() from lib/Config.pm:0
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:644
   out $=Config::TIEHASH('Config') from lib/Config.pm:644
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/E
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
  out $=main::BEGIN() from /dev/null:0
  in  @=Config::myconfig() from /dev/null:0
   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
   out $=Config::FETCH('Config=HASH(0x1aa444)', 'package') from lib/Config.pm:574
   in  $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574
   out $=Config::FETCH('Config=HASH(0x1aa444)', 'baserev') from lib/Config.pm:574

=item 6

  in  $=CODE(0x15eca4)() from /dev/null:0
   in  $=CODE(0x182528)() from lib/Config.pm:2
    Package lib/Exporter.pm.
   out $=CODE(0x182528)() from lib/Config.pm:0
   scalar context return from CODE(0x182528): undef
   Package lib/Config.pm.
   in  $=Config::TIEHASH('Config') from lib/Config.pm:628
   out $=Config::TIEHASH('Config') from lib/Config.pm:628
   scalar context return from Config::TIEHASH:   empty hash
   in  $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
    in  $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
    out $=Exporter::export('Config', 'main', 'myconfig', 'config_vars') from lib/Exporter.pm:171
    scalar context return from Exporter::export: ''
   out $=Exporter::import('Config', 'myconfig', 'config_vars') from /dev/null:0
   scalar context return from Exporter::import: ''

=back

Во всех случаях, показанных выше, отступ строки показывает дерево вызовов.
Если бит 2 C<frame> установлен, строка будет успешно напечатана при выходе из подпрограммы. 
Если бит 4 установлен,  аргументы печатаются наряду с информацией о вызывающей функции
Если бит 8 установлен, аргументы напечатаются, даже если они связаны или ссылаются. (even if they are tied or references.)
Если бит 16 установлен, то возвращаемое значение также печатается.

Когда пакет компилируется, строка, подобная этой

    Package lib/Carp.pm.

Печатается с правильным отступом.

=head1 Отладка регулярных выражений

Есть два способа включить вывод отладки для регулярных выражений.

Если ваш perl скомпилирован с помощью  C<-DDEBUGGING>, вы можете использовать флаг
B<-Dr> в командной строке.

В противном случае вы можете использовать C<use re 'debug'>, который работает и во
 время компиляции и во время выполнения. Начиная с Perl 5.9.5, эта прагма имеет лексическую 
область видимости.

=head2 Вывод лога во время компиляции (Compile-time Output)

Вывод отладки во время компиляции выглядит так:

  Compiling REx '[bc]d(ef*g)+h[ij]k$'
  size 45 Got 364 bytes for offset annotations.
  first at 1
  rarest char g at 0
  rarest char d at 0
     1: ANYOF[bc](12)
    12: EXACT <d>(14)
    14: CURLYX[0] {1,32767}(28)
    16:   OPEN1(18)
    18:     EXACT <e>(20)
    20:     STAR(23)
    21:       EXACT <f>(0)
    23:     EXACT <g>(25)
    25:   CLOSE1(27)
    27:   WHILEM[1/1](0)
    28: NOTHING(29)
    29: EXACT <h>(31)
    31: ANYOF[ij](42)
    42: EXACT <k>(44)
    44: EOL(45)
    45: END(0)
  anchored 'de' at 1 floating 'gh' at 3..2147483647 (checking floating) 
        stclass 'ANYOF[bc]' minlen 7 
  Offsets: [45]
  	1[4] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 5[1]
  	0[0] 12[1] 0[0] 6[1] 0[0] 7[1] 0[0] 9[1] 8[1] 0[0] 10[1] 0[0]
  	11[1] 0[0] 12[0] 12[0] 13[1] 0[0] 14[4] 0[0] 0[0] 0[0] 0[0]
  	0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 18[1] 0[0] 19[1] 20[0]  
  Omitting $` $& $' support.

Первая строка показывает предварительно скомпилированную форму регулярного выражения. Вторая
показывает размер скомпилированной формы (в произвольных единицах, обычно
4-байтные слова) и общее количество байт, выделенных для
таблицы смещения/длины, обычно 4+C<размер>* 8 (offset/length table, usually 4+C<size>*8). Следующая строка показывает
 метку I<id> первого узла, с которым выполнилось сопоставление (первого найденного узла).

 Привязанный 'de' к 1 плавающей 'gh' в 3..2147483647 (проверка плавающей)
        Stclass 'ANYOF [bc]' minlen 7

  (anchored 'de' at 1 floating 'gh' at 3..2147483647 (checking floating) 
        stclass 'ANYOF[bc]' minlen 7) 
	
cтрока (разделенная на две строки) содержит информацию оптимизатора. 
В показанном примере оптимизатор обнаружил, что совпадение
должно содержать подстроку C<de> со смещением 1 плюс подстрока C<gh>
при некотором смещении между 3 и бесконечностью. Более того, при проверке на
эти подстроки (чтобы отказаться от невозможных совпадений быстро), Perl проверит
для подстроки C<gh> перед проверкой подстроки C<de>. 
Оптимизатор также может использовать знания о том, что начало матча (на
C<first> I<id>) с символьным классом и строка короче 7 символов не может быть найдена.

Поля, представляющие интерес, могут отображаться в этой строке:

=over 4

=item C<anchored> I<STRING> C<at> I<POS>

=item C<floating> I<STRING> C<at> I<POS1..POS2>

См. Выше.

=item C<matching floating/anchored>

Какую подстроку проверить в первую очередь.

=item C<minlen>

Минимальная длина поиска(match).

=item C<stclass> I<TYPE>

Тип первого совпадающего узла.

=item C<noscan>

Не сканируйте найденные подстроки.

=item C<isall>

Означает, что информация оптимизатора - это все, что
 содержит регулярное выражение, и, таким образом, нет необходимости вводить регулярное выражение вообще
 (does not need to enter the regex engine at all.)

=item C<GPOS>

Установите, если шаблон содержит C<\G>.

=item C<plus> 

Установите, если шаблон начинается с повторяющегося символа (как в C<x+y>).

=item C<implicit>

Установите, если шаблон начинается с C<.*>.

=item C<with eval> 

Установите, если шаблон содержит eval-группы, такие как C<(?{ code })> и
C<(??{ code })>.

=item C<якорный(ТИП)> (C<anchored(TYPE)>)

Если шаблон может соответствовать нескольким местам, с C<TYPE>
будучи C<BOL>, С<MBOL> или С<GPOS>. Смотрите таблицу ниже.

=back

Если подстрока, как известно, должна соответствует только в конце строки , то за ней нужно ставить символ
 C<$>, как в C<плавающий 'k'$> (C<floating 'k'$>).

Информация для оптимизатора используется, чтобы избежать ввода (медленного) регекс
двигателя для строк, которые не будут соответствовать определенно. Если флаг C<isall>
 задан, вызов обработчика регулярных выражений можно избежать даже когда оптимизатор
нашел соответствующее место для поиска.

Раздел про оптимизатор выше представляет собой список I<узлов> (I<nodes>) из скомпилированных
форм регекса. Каждая строка имеет формат

C<   >I<id>: I<ТИП> I<ОПЦИОНАЛЬНАЯ-ИНФОРМАЦИЯ> (I<следующий-ид>)
C<   >I<id>: I<TYPE> I<OPTIONAL-INFO> (I<next-id>)

=head2 Типы узлов (Types of Nodes)

Ниже приведены возможные типы, с кратким описанием:

=for comment
Эта таблица создается с помощью regen/regcomp.pl. Любые изменения, сделанные здесь,
будут потеряны.

=for regcomp.pl begin

 # ТИП описание-аргумента [число-аргументов] [прыжок-в-длину-длина] ОПИСАНИЕ
 # TYPE arg-description [num-args] [longjump-len] DESCRIPTION

 # Точки выхода
 # Exit points

 END                no         Конец программы.
 SUCCEED            no         Вернуться из подпрограммы, в основном. (Return from a subroutine, basically.)

 # Якоря:

 BOL                no         Найдет "" в начале строки.
 MBOL               no         То же,предполагая мультистроку.
 SBOL               no         То же,предполагая одностроку. (Same, assuming singleline.)
 EOS                no         Найдет "" в конце строки. (string)
 EOL                no         Найдет "" в конце линии. (line)
 MEOL               no         То же,предполагая мультистроку.
 SEOL               no         То же,предполагая одностроку.
 BOUND              no         Найдет "" при любом использовании границы слова
                               при родной семантике кодировки для не-utf8
 BOUNDL             no         Найдет "" в любой локальной границе слова ( Match "" at any locale word boundary)
 BOUNDU             no         Найдет "" в любой локальной границе слова
                               используя семантику Юникода
 BOUNDA             no         Найдет "" в любой локальной границе слова используя ASCII
                               семантику
 NBOUND             no         Match "" at any word non-boundary using
                               native charset semantics for non-utf8
 NBOUNDL            no         Match "" at any locale word non-boundary
 NBOUNDU            no         Match "" at any word non-boundary using
                               Unicode semantics
 NBOUNDA            no         Match "" at any word non-boundary using
                               ASCII semantics
 GPOS               no         Matches where last m//g left off.

 # [Special] alternatives:

 REG_ANY            no         Match any one character (except newline).
 SANY               no         Match any one character.
 CANY               no         Match any one byte.
 ANYOF              sv         Match character in (or not in) this
                               class, single char match only
 ANYOF_WARN_SUPER   sv         Match character in (or not in) this
                               class, warn (if enabled) upon matching a
                               char above Unicode max;
 ANYOF_SYNTHETIC    sv         Synthetic start class

 POSIXD             none       Some [[:class:]] under /d; the FLAGS
                               field gives which one
 POSIXL             none       Some [[:class:]] under /l; the FLAGS
                               field gives which one
 POSIXU             none       Some [[:class:]] under /u; the FLAGS
                               field gives which one
 POSIXA             none       Some [[:class:]] under /a; the FLAGS
                               field gives which one
 NPOSIXD            none       complement of POSIXD, [[:^class:]]
 NPOSIXL            none       complement of POSIXL, [[:^class:]]
 NPOSIXU            none       complement of POSIXU, [[:^class:]]
 NPOSIXA            none       complement of POSIXA, [[:^class:]]

 CLUMP              no         Match any extended grapheme cluster
                               sequence

 # Alternation

 # BRANCH        The set of branches constituting a single choice are
 #               hooked together with their "next" pointers, since
 #               precedence prevents anything being concatenated to
 #               any individual branch.  The "next" pointer of the last
 #               BRANCH in a choice points to the thing following the
 #               whole choice.  This is also where the final "next"
 #               pointer of each individual branch points; each branch
 #               starts with the operand node of a BRANCH node.
 #
 BRANCH             node       Match this alternative, or the next...

 # Back pointer

 # BACK          Normal "next" pointers all implicitly point forward;
 #               BACK exists to make loop structures possible.
 # not used
 BACK               no         Match "", "next" ptr points backward.

 # Literals

 EXACT              str        Match this string (preceded by length).
 EXACTF             str        Match this non-UTF-8 string (not
                               guaranteed to be folded) using /id rules
                               (w/len).
 EXACTFL            str        Match this string (not guaranteed to be
                               folded) using /il rules (w/len).
 EXACTFU            str        Match this string (folded iff in UTF-8,
                               length in folding doesn't change if not
                               in UTF-8) using /iu rules (w/len).
 EXACTFA            str        Match this string (not guaranteed to be
                               folded) using /iaa rules (w/len).
 EXACTFU_SS         str        Match this string (folded iff in UTF-8,
                               length in folding may change even if not
                               in UTF-8) using /iu rules (w/len).
 EXACTFU_TRICKYFOLD str        Match this folded UTF-8 string using /iu
                               rules

 # Do nothing types

 NOTHING            no         Match empty string.
 # A variant of above which delimits a group, thus stops optimizations
 TAIL               no         Match empty string. Can jump here from
                               outside.

 # Loops

 # STAR,PLUS    '?', and complex '*' and '+', are implemented as
 #               circular BRANCH structures using BACK.  Simple cases
 #               (one character per match) are implemented with STAR
 #               and PLUS for speed and to minimize recursive plunges.
 #
 STAR               node       Match this (simple) thing 0 or more
                               times.
 PLUS               node       Match this (simple) thing 1 or more
                               times.

 CURLY              sv 2       Match this simple thing {n,m} times.
 CURLYN             no 2       Capture next-after-this simple thing
 CURLYM             no 2       Capture this medium-complex thing {n,m}
                               times.
 CURLYX             sv 2       Match this complex thing {n,m} times.

 # This terminator creates a loop structure for CURLYX
 WHILEM             no         Do curly processing and see if rest
                               matches.

 # Buffer related

 # OPEN,CLOSE,GROUPP     ...are numbered at compile time.
 OPEN               num 1      Mark this point in input as start of #n.
 CLOSE              num 1      Analogous to OPEN.

 REF                num 1      Match some already matched string
 REFF               num 1      Match already matched string, folded
                               using native charset semantics for non-
                               utf8
 REFFL              num 1      Match already matched string, folded in
                               loc.
 REFFU              num 1      Match already matched string, folded
                               using unicode semantics for non-utf8
 REFFA              num 1      Match already matched string, folded
                               using unicode semantics for non-utf8, no
                               mixing ASCII, non-ASCII

 # Named references.  Code in regcomp.c assumes that these all are after
 # the numbered references
 NREF               no-sv 1    Match some already matched string
 NREFF              no-sv 1    Match already matched string, folded
                               using native charset semantics for non-
                               utf8
 NREFFL             no-sv 1    Match already matched string, folded in
                               loc.
 NREFFU             num 1      Match already matched string, folded
                               using unicode semantics for non-utf8
 NREFFA             num 1      Match already matched string, folded
                               using unicode semantics for non-utf8, no
                               mixing ASCII, non-ASCII

 IFMATCH            off 1 2    Succeeds if the following matches.
 UNLESSM            off 1 2    Fails if the following matches.
 SUSPEND            off 1 1    "Independent" sub-RE.
 IFTHEN             off 1 1    Switch, should be preceded by switcher.
 GROUPP             num 1      Whether the group matched.

 # Support for long RE

 LONGJMP            off 1 1    Jump far away.
 BRANCHJ            off 1 1    BRANCH with long offset.

 # The heavy worker

 EVAL               evl 1      Execute some Perl code.

 # Modifiers

 MINMOD             no         Next operator is not greedy.
 LOGICAL            no         Next opcode should set the flag only.

 # This is not used yet
 RENUM              off 1 1    Group with independently numbered parens.

 # Trie Related

 # Behave the same as A|LIST|OF|WORDS would. The '..C' variants
 # have inline charclass data (ascii only), the 'C' store it in the
 # structure.

 TRIE               trie 1     Match many EXACT(F[ALU]?)? at once.
                               flags==type
 TRIEC              trie       Same as TRIE, but with embedded charclass
                    charclass  data

 AHOCORASICK        trie 1     Aho Corasick stclass. flags==type
 AHOCORASICKC       trie       Same as AHOCORASICK, but with embedded
                    charclass  charclass data

 # Regex Subroutines
 GOSUB              num/ofs 2L recurse to paren arg1 at (signed) ofs
                               arg2
 GOSTART            no         recurse to start of pattern

 # Special conditionals
 NGROUPP            no-sv 1    Whether the group matched.
 INSUBP             num 1      Whether we are in a specific recurse.
 DEFINEP            none 1     Never execute directly.

 # Backtracking Verbs
 ENDLIKE            none       Used only for the type field of verbs
 OPFAIL             none       Same as (?!)
 ACCEPT             parno 1    Accepts the current matched string.

 # Verbs With Arguments
 VERB               no-sv 1    Used only for the type field of verbs
 PRUNE              no-sv 1    Pattern fails at this startpoint if no-
                               backtracking through this
 MARKPOINT          no-sv 1    Push the current location for rollback by
                               cut.
 SKIP               no-sv 1    On failure skip forward (to the mark)
                               before retrying
 COMMIT             no-sv 1    Pattern fails outright if backtracking
                               through this
 CUTGROUP           no-sv 1    On failure go to the next alternation in
                               the group

 # Control what to keep in $&.
 KEEPS              no         $& begins here.

 # New charclass like patterns
 LNBREAK            none       generic newline pattern

 # SPECIAL  REGOPS

 # This is not really a node, but an optimized away piece of a "long"
 # node.  To simplify debugging output, we mark it as if it were a node
 OPTIMIZED          off        Placeholder for dump.

 # Special opcode with the property that no opcode in a compiled program
 # will ever be of this type. Thus it can be used as a flag value that
 # no other opcode has been seen. END is used similarly, in that an END
 # node cant be optimized. So END implies "unoptimizable" and PSEUDO
 # mean "not seen anything to optimize yet".
 PSEUDO             off        Pseudo opcode for internal use.

=for regcomp.pl end

=for unprinted-credits
Next section M-J. Dominus (mjd-perl-patch+@plover.com) 20010421

Following the optimizer information is a dump of the offset/length
table, here split across several lines:

  Offsets: [45]
  	1[4] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 5[1]
  	0[0] 12[1] 0[0] 6[1] 0[0] 7[1] 0[0] 9[1] 8[1] 0[0] 10[1] 0[0]
  	11[1] 0[0] 12[0] 12[0] 13[1] 0[0] 14[4] 0[0] 0[0] 0[0] 0[0]
  	0[0] 0[0] 0[0] 0[0] 0[0] 0[0] 18[1] 0[0] 19[1] 20[0]  

The first line here indicates that the offset/length table contains 45
entries.  Each entry is a pair of integers, denoted by C<offset[length]>.
Entries are numbered starting with 1, so entry #1 here is C<1[4]> and
entry #12 is C<5[1]>.  C<1[4]> indicates that the node labeled C<1:>
(the C<1: ANYOF[bc]>) begins at character position 1 in the
pre-compiled form of the regex, and has a length of 4 characters.
C<5[1]> in position 12 
indicates that the node labeled C<12:>
(the C<< 12: EXACT <d> >>) begins at character position 5 in the
pre-compiled form of the regex, and has a length of 1 character.
C<12[1]> in position 14 
indicates that the node labeled C<14:>
(the C<< 14: CURLYX[0] {1,32767} >>) begins at character position 12 in the
pre-compiled form of the regex, and has a length of 1 character---that
is, it corresponds to the C<+> symbol in the precompiled regex.

C<0[0]> items indicate that there is no corresponding node.

=head2 Run-time Output

First of all, when doing a match, one may get no run-time output even
if debugging is enabled.  This means that the regex engine was never
entered and that all of the job was therefore done by the optimizer.

If the regex engine was entered, the output may look like this:

  Matching '[bc]d(ef*g)+h[ij]k$' against 'abcdefg__gh__'
    Setting an EVAL scope, savestack=3
     2 <ab> <cdefg__gh_>    |  1: ANYOF
     3 <abc> <defg__gh_>    | 11: EXACT <d>
     4 <abcd> <efg__gh_>    | 13: CURLYX {1,32767}
     4 <abcd> <efg__gh_>    | 26:   WHILEM
				0 out of 1..32767  cc=effff31c
     4 <abcd> <efg__gh_>    | 15:     OPEN1
     4 <abcd> <efg__gh_>    | 17:     EXACT <e>
     5 <abcde> <fg__gh_>    | 19:     STAR
			     EXACT <f> can match 1 times out of 32767...
    Setting an EVAL scope, savestack=3
     6 <bcdef> <g__gh__>    | 22:       EXACT <g>
     7 <bcdefg> <__gh__>    | 24:       CLOSE1
     7 <bcdefg> <__gh__>    | 26:       WHILEM
				    1 out of 1..32767  cc=effff31c
    Setting an EVAL scope, savestack=12
     7 <bcdefg> <__gh__>    | 15:         OPEN1
     7 <bcdefg> <__gh__>    | 17:         EXACT <e>
       restoring \1 to 4(4)..7
				    failed, try continuation...
     7 <bcdefg> <__gh__>    | 27:         NOTHING
     7 <bcdefg> <__gh__>    | 28:         EXACT <h>
				    failed...
				failed...

The most significant information in the output is about the particular I<node>
of the compiled regex that is currently being tested against the target string.
The format of these lines is

C<    >I<STRING-OFFSET> <I<PRE-STRING>> <I<POST-STRING>>   |I<ID>:  I<TYPE>

The I<TYPE> info is indented with respect to the backtracking level.
Other incidental information appears interspersed within.

=head1 Debugging Perl Memory Usage

Perl is a profligate wastrel when it comes to memory use.  There
is a saying that to estimate memory usage of Perl, assume a reasonable
algorithm for memory allocation, multiply that estimate by 10, and
while you still may miss the mark, at least you won't be quite so
astonished.  This is not absolutely true, but may provide a good
grasp of what happens.

Assume that an integer cannot take less than 20 bytes of memory, a
float cannot take less than 24 bytes, a string cannot take less
than 32 bytes (all these examples assume 32-bit architectures, the
result are quite a bit worse on 64-bit architectures).  If a variable
is accessed in two of three different ways (which require an integer,
a float, or a string), the memory footprint may increase yet another
20 bytes.  A sloppy malloc(3) implementation can inflate these
numbers dramatically.

On the opposite end of the scale, a declaration like

  sub foo;

may take up to 500 bytes of memory, depending on which release of Perl
you're running.

Anecdotal estimates of source-to-compiled code bloat suggest an
eightfold increase.  This means that the compiled form of reasonable
(normally commented, properly indented etc.) code will take
about eight times more space in memory than the code took
on disk.

The B<-DL> command-line switch is obsolete since circa Perl 5.6.0
(it was available only if Perl was built with C<-DDEBUGGING>).
The switch was used to track Perl's memory allocations and possible
memory leaks.  These days the use of malloc debugging tools like
F<Purify> or F<valgrind> is suggested instead.  See also
L<perlhacktips/PERL_MEM_LOG>.

One way to find out how much memory is being used by Perl data
structures is to install the Devel::Size module from CPAN: it gives
you the minimum number of bytes required to store a particular data
structure.  Please be mindful of the difference between the size()
and total_size().

If Perl has been compiled using Perl's malloc you can analyze Perl
memory usage by setting $ENV{PERL_DEBUG_MSTATS}.

=head2 Using C<$ENV{PERL_DEBUG_MSTATS}>

If your perl is using Perl's malloc() and was compiled with the
necessary switches (this is the default), then it will print memory
usage statistics after compiling your code when C<< $ENV{PERL_DEBUG_MSTATS}
> 1 >>, and before termination of the program when C<<
$ENV{PERL_DEBUG_MSTATS} >= 1 >>.  The report format is similar to
the following example:

  $ PERL_DEBUG_MSTATS=2 perl -e "require Carp"
  Memory allocation statistics after compilation: (buckets 4(4)..8188(8192)
     14216 free:   130   117    28     7     9   0   2     2   1 0 0
		437    61    36     0     5
     60924 used:   125   137   161    55     7   8   6    16   2 0 1
		 74   109   304    84    20
  Total sbrk(): 77824/21:119. Odd ends: pad+heads+chain+tail: 0+636+0+2048.
  Memory allocation statistics after execution:   (buckets 4(4)..8188(8192)
     30888 free:   245    78    85    13     6   2   1     3   2 0 1
		315   162    39    42    11
    175816 used:   265   176  1112   111    26  22  11    27   2 1 1
		196   178  1066   798    39
  Total sbrk(): 215040/47:145. Odd ends: pad+heads+chain+tail: 0+2192+0+6144.

It is possible to ask for such a statistic at arbitrary points in
your execution using the mstat() function out of the standard
Devel::Peek module.

Here is some explanation of that format:

=over 4

=item C<buckets SMALLEST(APPROX)..GREATEST(APPROX)>

Perl's malloc() uses bucketed allocations.  Every request is rounded
up to the closest bucket size available, and a bucket is taken from
the pool of buckets of that size.

The line above describes the limits of buckets currently in use.
Each bucket has two sizes: memory footprint and the maximal size
of user data that can fit into this bucket.  Suppose in the above
example that the smallest bucket were size 4.  The biggest bucket
would have usable size 8188, and the memory footprint would be 8192.

In a Perl built for debugging, some buckets may have negative usable
size.  This means that these buckets cannot (and will not) be used.
For larger buckets, the memory footprint may be one page greater
than a power of 2.  If so, the corresponding power of two is
printed in the C<APPROX> field above.

=item Free/Used

The 1 or 2 rows of numbers following that correspond to the number
of buckets of each size between C<SMALLEST> and C<GREATEST>.  In
the first row, the sizes (memory footprints) of buckets are powers
of two--or possibly one page greater.  In the second row, if present,
the memory footprints of the buckets are between the memory footprints
of two buckets "above".

For example, suppose under the previous example, the memory footprints
were

     free:    8     16    32    64    128  256 512 1024 2048 4096 8192
	   4     12    24    48    80

With a non-C<DEBUGGING> perl, the buckets starting from C<128> have
a 4-byte overhead, and thus an 8192-long bucket may take up to
8188-byte allocations.

=item C<Total sbrk(): SBRKed/SBRKs:CONTINUOUS>

The first two fields give the total amount of memory perl sbrk(2)ed
(ess-broken? :-) and number of sbrk(2)s used.  The third number is
what perl thinks about continuity of returned chunks.  So long as
this number is positive, malloc() will assume that it is probable
that sbrk(2) will provide continuous memory.

Memory allocated by external libraries is not counted.

=item C<pad: 0>

The amount of sbrk(2)ed memory needed to keep buckets aligned.

=item C<heads: 2192>

Although memory overhead of bigger buckets is kept inside the bucket, for
smaller buckets, it is kept in separate areas.  This field gives the
total size of these areas.

=item C<chain: 0>

malloc() may want to subdivide a bigger bucket into smaller buckets.
If only a part of the deceased bucket is left unsubdivided, the rest
is kept as an element of a linked list.  This field gives the total
size of these chunks.

=item C<tail: 6144>

To minimize the number of sbrk(2)s, malloc() asks for more memory.  This
field gives the size of the yet unused part, which is sbrk(2)ed, but
never touched.

=back

=head1 SEE ALSO

L<perldebug>,
L<perlguts>,
L<perlrun>
L<re>,
and
L<Devel::DProf>.

=head1 ПЕРЕВОДЧИКИ
 
=over
 
=item * Николай Мишин C<< <mi@ya.ru> >>
 
=back
